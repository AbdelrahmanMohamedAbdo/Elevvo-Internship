----Top-Selling Tracks (by Revenue)
SELECT
  T.Name AS TrackName,
  SUM(IL.Unit_Price * IL.Quantity) AS TotalRevenue,
  T.Track_Id
FROM Track AS T
JOIN Invoice_Line AS IL
  ON T.Track_Id = IL.Track_Id
GROUP BY 1, 3
ORDER BY TotalRevenue DESC
LIMIT 10;


----Top-Selling Tracks (by Quantity)
SELECT 
  t.name AS Name_Track,
  SUM(il.quantity) AS Sold_Units
FROM 
  track AS t
JOIN 
  invoice_line AS il ON t.track_id = il.track_id
GROUP BY 
  t.name
ORDER BY 
  Sold_Units DESC
LIMIT 12;


----total revenue generated by each country
SELECT
  c.country,
  COUNT(DISTINCT c.customer_id) AS special_buyers,
  COUNT(i.invoice_id) AS invoices,
  SUM(i.total) AS total_revenue
FROM
  customer c
JOIN
  invoice i ON c.customer_id = i.customer_id
GROUP BY
  c.country
ORDER BY
  total_revenue DESC;

  
----Monthly Performance 
SELECT
  TO_CHAR(i.Invoice_Date, 'YYYY-MM') AS Sales_Month,
  SUM(i.Total) AS Total_Monthly_Revenue,
  COUNT(i.Invoice_Id) AS Total_Orders
FROM
  Invoice AS i
GROUP BY
  Sales_Month
ORDER BY
  Sales_Month;


----Top 5 Lowest Spending Customers (Non-Zero Total)
-- they are the customers who need targeted campaigns or are at risk of churning.

SELECT
    C.Customer_Id AS Customer_Key,
    C.First_Name || ' ' || C.Last_Name AS Full_Customer_Name,
    SUM(I.Total) AS Lifetime_Revenue_USD
FROM
    Customer AS C
JOIN
    Invoice AS I ON C.Customer_Id = I.Customer_Id
GROUP BY
    C.Customer_Id, Full_Customer_Name
HAVING
    SUM(I.Total) > 0
ORDER BY
    Lifetime_Revenue_USD ASC
LIMIT 5;


----Top 5 Highest Spending Customers
-- This gives the "whale" customers who drive the most revenue --> :D $$$

SELECT
    C.Customer_Id AS Customer_Key,
    C.First_Name || ' ' || C.Last_Name AS Full_Customer_Name,
    SUM(I.Total) AS Lifetime_Revenue_USD,
    RANK() OVER (ORDER BY SUM(I.Total) DESC) AS Revenue_Rank
FROM
    Customer AS C
JOIN
    Invoice AS I ON C.Customer_Id = I.Customer_Id
GROUP BY
    C.Customer_Id, Full_Customer_Name
ORDER BY
    Lifetime_Revenue_USD DESC
LIMIT 5;

----Top Genres (Sorted by Quantity Sold)
-- No way Jazz 5th.. :/ 

SELECT
    G.Name AS Genre_Category,
    SUM(IL.Quantity) AS Total_Units_Sold
FROM
    Genre AS G
JOIN
    Track AS T ON G.Genre_Id = T.Genre_Id
JOIN
    Invoice_Line AS IL ON T.Track_Id = IL.Track_Id
GROUP BY
    G.Name
ORDER BY
    Total_Units_Sold DESC
LIMIT 10;

----Revenue by Artist (Top 10)

SELECT
    AR.Name AS Artist_Name,
    SUM(IL.Unit_Price * IL.Quantity) AS Artist_Total_Revenue
FROM
    Artist AS AR
JOIN
    Album AS AL ON AR.Artist_Id = AL.Artist_Id
JOIN
    Track AS T ON AL.Album_Id = T.Album_Id
JOIN
    Invoice_Line AS IL ON T.Track_Id = IL.Track_Id
GROUP BY
    AR.Name
ORDER BY
    Artist_Total_Revenue DESC, Artist_Name ASC
LIMIT 10;

----Geographic Sales Analysis (City-Wise)

SELECT
    I.Billing_City AS Sales_City,
    COUNT(DISTINCT C.Customer_Id) AS Active_Customer_Count,
    SUM(I.Total) AS Gross_Revenue_by_City
FROM
    Customer AS C
JOIN
    Invoice AS I ON C.Customer_Id = I.Customer_Id
GROUP BY
    I.Billing_City
ORDER BY
    Active_Customer_Count DESC, Gross_Revenue_by_City DESC;


----RFM Analysis

WITH Customer_Metrics AS (
    -- Calculate Recency (R), Frequency (F), and Monetary (M) metrics per customer
    SELECT
        C.Customer_Id,
        C.First_Name || ' ' || C.Last_Name AS Customer_Full_Name,

        -- Recency: Days since the most recent invoice date
        -- Using the efficient subquery from the Anchor optimization approach
        DATE_PART('day', (SELECT MAX(Invoice_Date) FROM Invoice) - MAX(I.Invoice_Date)) AS Last_Purchase_Days,

        -- Frequency: Total count of distinct invoices
        COUNT(DISTINCT I.Invoice_Id) AS Transaction_Count,

        -- Monetary: Total gross revenue contributed by the customer
        SUM(I.Total) AS Total_Lifetime_Spending

    FROM
        Customer C
    JOIN
        Invoice I ON C.Customer_Id = I.Customer_Id
    GROUP BY
        C.Customer_Id, Customer_Full_Name
),

RFM_Segmentation AS (
    SELECT
        *,
        -- R Score: Lower days (more recent) is better
        NTILE(5) OVER (ORDER BY Last_Purchase_Days ASC) AS R_Score,

        -- F Score: Higher transaction count is better
        NTILE(5) OVER (ORDER BY Transaction_Count DESC) AS F_Score,

        -- M Score: Higher spending is better
        NTILE(5) OVER (ORDER BY Total_Lifetime_Spending DESC) AS M_Score

    FROM
        Customer_Metrics
)

SELECT
    Customer_Full_Name,
    Last_Purchase_Days AS Recency_Days,
    Transaction_Count AS Frequency_Units,
    Total_Lifetime_Spending AS Monetary_Value_USD,
    (R_Score::TEXT || F_Score::TEXT || M_Score::TEXT) AS Customer_Value_Index -- The combined RFM score
FROM
    RFM_Segmentation
ORDER BY
    Customer_Value_Index DESC;